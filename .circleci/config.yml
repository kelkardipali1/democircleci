# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk
    working_directory: ~/democircleci
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # Build app
      - run: gradle clean build
      - persist_to_workspace:
          root: ~/democircleci
          paths:
##            - Dockerfile
#            - build
  build_docker:
    environment:
      DOCKER_FILE: "Dockerfile"
      SERVICE: "democircle"
    working_directory: ~/democircleci
    docker:
      - image: kelkardipali/custombuildpackforcircleci:1.0.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - setup_remote_docker
#      - attach_workspace:
#          at: ~/democircleci
      - run:
          name: aws configure
          command: |
            aws --version && aws configure set aws_access_key_id $AWS_ACCESS_KEY && aws configure set aws_secret_access_key $AWS_SECRET_KEY && aws configure set default.region ap-south-1 && aws configure list
      - run:
          name: aws ECR login
          command: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 793463097803.dkr.ecr.ap-south-1.amazonaws.com/democircleci
      - run:
          name: Build Docker image
          command:  docker build --file ${DOCKER_FILE} -t image .
      - run:
          name: docker tag
          command: docker tag image 793463097803.dkr.ecr.ap-south-1.amazonaws.com/democircleci:latest
      - run:
          name: docker push
          command: docker push 793463097803.dkr.ecr.ap-south-1.amazonaws.com/democircleci:latest

  deploy_service:
    working_directory: ~/democircleci
    docker:
      - image: kelkardipali/custombuildpackforcircleci:1.0.0
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - run:
          name: aws configure
          command: |
            aws --version && aws configure set aws_access_key_id $AWS_ACCESS_KEY && aws configure set aws_secret_access_key $AWS_SECRET_KEY && aws configure set default.region ap-south-1 && aws configure list
            aws eks update-kubeconfig --name infra-catalyst-central --region ap-south-1
      - run:
          name: login to helm registry
          command: |
            export HELM_EXPERIMENTAL_OCI=1
            aws ecr get-login-password  --region ap-south-1 | helm registry login  --username AWS --password-stdin 793463097803.dkr.ecr.ap-south-1.amazonaws.com/artifact-test
      - run:
          name: helm push
          command: |
            export HELM_EXPERIMENTAL_OCI=1
            helm chart save democirclehelm demohelm
            helm chart save democirclehelm 793463097803.dkr.ecr.ap-south-1.amazonaws.com/artifact-test:demohelm
            helm chart list
            helm chart push 793463097803.dkr.ecr.ap-south-1.amazonaws.com/artifact-test:demohelm
      - run:
          name: deploy service
          command: |
            helm plugin install https://github.com/vetyy/helm-ecr.git
            helm install demo-app ecr://793463097803.dkr.ecr.ap-south-1.amazonaws.com/artifact-test/demohelm -n apps

workflows:
  version: 2
  deploy_to_dev:
    jobs:
      - build:
          context:
            - project_secrets
          filters:
            branches:
              only: circleci-project-setup
      - build_docker:
          context:
            - AWS_SECRETS
            - DOCKER_SECRETS
          requires:
            - build
          filters:
            branches:
              only: circleci-project-setup
      - deploy_service:
          context:
            - AWS_SECRETS
            - DOCKER_SECRETS
          requires:
            - build_docker
          filters:
            branches:
              only: circleci-project-setup


